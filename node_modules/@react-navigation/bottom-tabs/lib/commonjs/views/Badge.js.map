{"version":3,"sources":["Badge.tsx"],"names":["Badge","visible","size","children","style","rest","opacity","React","useState","Animated","Value","theme","useEffect","timing","toValue","duration","useNativeDriver","start","StyleSheet","flatten","backgroundColor","colors","notification","restStyle","textColor","isLight","borderRadius","fontSize","Math","floor","color","lineHeight","height","minWidth","styles","container","create","alignSelf","textAlign","paddingHorizontal","overflow"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAqBe,SAASA,KAAT,OAML;AAAA,MANoB;AAC5BC,IAAAA,OAAO,GAAG,IADkB;AAE5BC,IAAAA,IAAI,GAAG,EAFqB;AAG5BC,IAAAA,QAH4B;AAI5BC,IAAAA;AAJ4B,GAMpB;AAAA,MADLC,IACK;;AACR,QAAM,CAACC,OAAD,IAAYC,KAAK,CAACC,QAAN,CAAe,MAAM,IAAIC,sBAASC,KAAb,CAAmBT,OAAO,GAAG,CAAH,GAAO,CAAjC,CAArB,CAAlB;AAEA,QAAMU,KAAK,GAAG,uBAAd;AAEAJ,EAAAA,KAAK,CAACK,SAAN,CAAgB,MAAM;AACpBH,0BAASI,MAAT,CAAgBP,OAAhB,EAAyB;AACvBQ,MAAAA,OAAO,EAAEb,OAAO,GAAG,CAAH,GAAO,CADA;AAEvBc,MAAAA,QAAQ,EAAE,GAFa;AAGvBC,MAAAA,eAAe,EAAE;AAHM,KAAzB,EAIGC,KAJH;AAKD,GAND,EAMG,CAACX,OAAD,EAAUL,OAAV,CANH,EALQ,CAaR;;AACA,gBACEiB,wBAAWC,OAAX,CAAmBf,KAAnB,KAA6B,EAD/B;AAAA,QAAM;AAAEgB,IAAAA,eAAe,GAAGT,KAAK,CAACU,MAAN,CAAaC;AAAjC,GAAN;AAAA,QAAwDC,SAAxD;;AAEA,QAAMC,SAAS,GAAG,oBAAMJ,eAAN,EAAuBK,OAAvB,KAAmC,OAAnC,GAA6C,OAA/D;AAEA,QAAMC,YAAY,GAAGxB,IAAI,GAAG,CAA5B;AACA,QAAMyB,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAY3B,IAAI,GAAG,CAAR,GAAa,CAAxB,CAAjB;AAEA,sBACE,oBAAC,qBAAD,CAAU,IAAV;AACE,IAAA,aAAa,EAAE,CADjB;AAEE,IAAA,KAAK,EAAE,CACL;AACEI,MAAAA,OADF;AAEEc,MAAAA,eAFF;AAGEU,MAAAA,KAAK,EAAEN,SAHT;AAIEG,MAAAA,QAJF;AAKEI,MAAAA,UAAU,EAAE7B,IAAI,GAAG,CALrB;AAME8B,MAAAA,MAAM,EAAE9B,IANV;AAOE+B,MAAAA,QAAQ,EAAE/B,IAPZ;AAQEwB,MAAAA;AARF,KADK,EAWLQ,MAAM,CAACC,SAXF,EAYLZ,SAZK;AAFT,KAgBMlB,IAhBN,GAkBGF,QAlBH,CADF;AAsBD;;AAED,MAAM+B,MAAM,GAAGhB,wBAAWkB,MAAX,CAAkB;AAC/BD,EAAAA,SAAS,EAAE;AACTE,IAAAA,SAAS,EAAE,UADF;AAETC,IAAAA,SAAS,EAAE,QAFF;AAGTC,IAAAA,iBAAiB,EAAE,CAHV;AAITC,IAAAA,QAAQ,EAAE;AAJD;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport { useTheme } from '@react-navigation/native';\n\ntype Props = {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  /**\n   * Style object for the tab bar container.\n   */\n  style?: Animated.WithAnimatedValue<StyleProp<TextStyle>>;\n};\n\nexport default function Badge({\n  visible = true,\n  size = 18,\n  children,\n  style,\n  ...rest\n}: Props) {\n  const [opacity] = React.useState(() => new Animated.Value(visible ? 1 : 0));\n\n  const theme = useTheme();\n\n  React.useEffect(() => {\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150,\n      useNativeDriver: true,\n    }).start();\n  }, [opacity, visible]);\n\n  // @ts-expect-error: backgroundColor definitely exists\n  const { backgroundColor = theme.colors.notification, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor = color(backgroundColor).isLight() ? 'black' : 'white';\n\n  const borderRadius = size / 2;\n  const fontSize = Math.floor((size * 3) / 4);\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          backgroundColor,\n          color: textColor,\n          fontSize,\n          lineHeight: size - 1,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]}